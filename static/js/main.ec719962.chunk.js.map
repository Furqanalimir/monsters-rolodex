{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","variable","map","value","SearchBox","placeholder","handleChange","type","onChange","App","state","monsters","searchFeild","fetch","then","response","json","users","setState","this","filteredMonster","filter","toLowerCase","includes","e","target","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAGaA,G,YAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,QACA,kCAAMN,EAAMI,QAAQG,cCHXC,G,MAAW,SAAAC,GAEpB,OACA,qBAAKR,UAAU,YAAf,SAEEQ,EAASL,QAAQM,KAAK,SAAAC,GAAK,OAC3B,cAAC,EAAD,CAAqBP,QAASO,GAAnBA,EAAMN,WCPVO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAYC,EAAf,EAAeA,aAAf,OACrB,8BACI,uBACAb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,QCkCHG,E,kDAnCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACbC,SAAU,GACVC,YAAa,IAJF,E,gEAQM,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEP,SAAUM,S,+BAEjC,IAAD,SAE0BE,KAAKT,MAA/BC,EAFA,EAEAA,SAAUC,EAFV,EAEUA,YAEVQ,EAAkBT,EAASU,QAAQ,SAAAzB,GAAO,OAC9CA,EAAQE,KAAKwB,cAAcC,SAASX,MAGtC,OACA,sBAAKnB,UAAU,MAAf,UACA,mDACA,cAAC,EAAD,CACAY,YAAY,kBACZC,aAAc,SAAAkB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOtB,MAAMmB,mBAG9D,cAAC,EAAD,CAAU1B,QAASwB,W,GA9BLM,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ec719962.chunk.js","sourcesContent":["import React from 'react';\nimport '../card/card.style.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n    <h2> {props.monster.name}  </h2>  \n    <p> { props.monster.email }</p>\n    </div>\n)\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.css';\n\nexport const CardList = variable =>{\n        \n    return (\n    <div className='card-list'>\n    {  \n      variable.monster.map( value =>(\n      <Card key={value.id} monster={value} /> \n        )  )}\n</div>)\n}","import React from 'react';\nimport '../search-box/searchbox.style.css';\n\nexport const SearchBox = ({ placeholder,handleChange }) =>(\n    <div>\n        <input \n        className=\"search\"\n        type=\"search\" \n        placeholder={placeholder}\n        onChange={handleChange}\n        >\n        </input>     \n    </div>\n)\n\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { CardList } from './component/card-list/card-list.component';\n\nimport { SearchBox } from './component/search-box/search.component.jsx'\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n    monsters: [ ],\n    searchFeild: []\n  };\n}\n\n componentDidMount(){\n   fetch('https://jsonplaceholder.typicode.com/users')\n   .then(response => response.json())\n   .then(users => this.setState({ monsters: users }));\n }\n  render(){\n\n    let { monsters, searchFeild } = this.state;\n    \n    const filteredMonster = monsters.filter( monster =>\n      monster.name.toLowerCase().includes(searchFeild)\n    )\n\n    return ( \n    <div className=\"App\">\n    <h1> Monsters Rodolex</h1>\n    <SearchBox \n    placeholder=\"Search Monsters\"\n    handleChange={e => this.setState({searchFeild: e.target.value.toLowerCase()})}\n     />\n    \n    <CardList monster={filteredMonster}/> \n\n    </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}